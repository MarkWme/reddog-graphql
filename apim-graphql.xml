<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
    </inbound>
    <backend>
        <set-graphql-resolver parent-type="Query" field="getProducts">
            <http-data-source>
                <http-request>
                    <set-method>GET</set-method>
                    <set-url>http://20.126.218.71:8081/product</set-url>
                </http-request>
            </http-data-source>
        </set-graphql-resolver>
        <set-graphql-resolver parent-type="Query" field="getProductById">
            <http-data-source>
                <http-request>
                    <set-method>GET</set-method>
                    <set-url>http://20.126.218.71:8081/product</set-url>
                </http-request>
                <http-response>
                    <set-body>@{
                        var productId = context.Request.Body.As<JObject>(true)["arguments"]["productId"].ToString();
                        var products = context.Response.Body.As<JArray>();
                        var response = new JArray();
                        foreach (var product in products) {
                            if (product["productId"].ToObject<string>() == productId) {
                                response.Add(product);
                            }
                        }
                        return response.ToString();                        
                    }</set-body>
                </http-response>
            </http-data-source>
        </set-graphql-resolver>
        <set-graphql-resolver parent-type="Mutation" field="addOrder">
            <http-data-source>
                <http-request>
                    <set-method>POST</set-method>
                    <set-url>http://20.126.218.71:8081/order</set-url>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        JObject body = context.Request.Body.As<JObject>(); 
                        return body.ToString(); 
                    }</set-body>
                </http-request>
            </http-data-source>
        </set-graphql-resolver>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>